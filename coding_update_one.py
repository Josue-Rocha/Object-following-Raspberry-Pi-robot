# -*- coding: utf-8 -*-
"""Coding_Update_One

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tnBoOiEhL4b2qGGamnt0otsK72bjrBm8
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Define paths
train_path = "/content/drive/MyDrive/Notre Dame Senior Sem. 2/Computer Vision/Project Files/Image Datasets/train"
val_path = "/content/drive/MyDrive/Notre Dame Senior Sem. 2/Computer Vision/Project Files/Image Datasets/val"
test_path = "/content/drive/MyDrive/Notre Dame Senior Sem. 2/Computer Vision/Project Files/Image Datasets/test"

# Image Preprocessing & Augmentation

from tensorflow.keras.preprocessing.image import ImageDataGenerator

IMG_SIZE = (224, 224)
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    directory=train_path,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

val_generator = val_datagen.flow_from_directory(
    directory=val_path,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

# CNN-Based Feature Extraction (MobileNetV2)

import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam

# Load pre-trained MobileNetV2 base model
base_model = MobileNetV2(
    weights='imagenet',
    include_top=False,
    input_shape=(224, 224, 3)
)
base_model.trainable = False  # Freeze base model

# Add custom classification head
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(64, activation='relu')(x)
output = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=output)

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.summary()

# Test the Model
EPOCHS = 10

history = model.fit(
    train_generator,
    epochs=EPOCHS,
    validation_data=val_generator
)